{"version":3,"sources":["../../src/server/is-private-ip.ts"],"sourcesContent":["import ipaddr from 'next/dist/compiled/ipaddr.js'\n\nexport function isPrivateIp(ip: string): boolean {\n  if (ip.startsWith('[') && ip.endsWith(']')) {\n    ip = ip.slice(1, -1)\n  }\n  if (!ipaddr.isValid(ip)) {\n    return false\n  }\n  try {\n    let addr = ipaddr.parse(ip)\n    if (addr.kind() === 'ipv6' && (addr as ipaddr.IPv6).isIPv4MappedAddress()) {\n      addr = (addr as ipaddr.IPv6).toIPv4Address()\n    }\n    const range = addr.range()\n    return range !== 'unicast'\n  } catch (e) {\n    return false\n  }\n}\n"],"names":["ipaddr","isPrivateIp","ip","startsWith","endsWith","slice","isValid","addr","parse","kind","isIPv4MappedAddress","toIPv4Address","range","e"],"mappings":"AAAA,OAAOA,YAAY,+BAA8B;AAEjD,OAAO,SAASC,YAAYC,EAAU;IACpC,IAAIA,GAAGC,UAAU,CAAC,QAAQD,GAAGE,QAAQ,CAAC,MAAM;QAC1CF,KAAKA,GAAGG,KAAK,CAAC,GAAG,CAAC;IACpB;IACA,IAAI,CAACL,OAAOM,OAAO,CAACJ,KAAK;QACvB,OAAO;IACT;IACA,IAAI;QACF,IAAIK,OAAOP,OAAOQ,KAAK,CAACN;QACxB,IAAIK,KAAKE,IAAI,OAAO,UAAU,AAACF,KAAqBG,mBAAmB,IAAI;YACzEH,OAAO,AAACA,KAAqBI,aAAa;QAC5C;QACA,MAAMC,QAAQL,KAAKK,KAAK;QACxB,OAAOA,UAAU;IACnB,EAAE,OAAOC,GAAG;QACV,OAAO;IACT;AACF","ignoreList":[0]}