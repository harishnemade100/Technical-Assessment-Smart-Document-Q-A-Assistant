{"version":3,"sources":["../../../src/server/app-render/make-get-server-inserted-html.tsx"],"sourcesContent":["/* eslint-disable @next/internal/no-ambiguous-jsx -- whole module is used in React Client */\nimport React, { type JSX } from 'react'\nimport { isHTTPAccessFallbackError } from '../../client/components/http-access-fallback/http-access-fallback'\nimport {\n  getURLFromRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { isRedirectError } from '../../client/components/redirect-error'\nimport { renderToReadableStream } from 'react-dom/server'\nimport { streamToString } from '../stream-utils/node-web-streams-helper'\nimport { RedirectStatusCode } from '../../client/components/redirect-status-code'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport type { ClientTraceDataEntry } from '../lib/trace/tracer'\n\nexport function makeGetServerInsertedHTML({\n  polyfills,\n  renderServerInsertedHTML,\n  serverCapturedErrors,\n  tracingMetadata,\n  basePath,\n}: {\n  polyfills: JSX.IntrinsicElements['script'][]\n  renderServerInsertedHTML: () => React.ReactNode\n  tracingMetadata: ClientTraceDataEntry[] | undefined\n  serverCapturedErrors: Array<unknown>\n  basePath: string\n}) {\n  let flushedErrorMetaTagsUntilIndex = 0\n\n  // These only need to be rendered once, they'll be set to empty arrays once flushed.\n  let polyfillTags = polyfills.map((polyfill) => {\n    return <script key={polyfill.src} {...polyfill} />\n  })\n  let traceMetaTags = (tracingMetadata || []).map(({ key, value }, index) => (\n    <meta key={`next-trace-data-${index}`} name={key} content={value} />\n  ))\n\n  return async function getServerInsertedHTML() {\n    // Loop through all the errors that have been captured but not yet\n    // flushed.\n    const errorMetaTags = []\n    while (flushedErrorMetaTagsUntilIndex < serverCapturedErrors.length) {\n      const error = serverCapturedErrors[flushedErrorMetaTagsUntilIndex]\n      flushedErrorMetaTagsUntilIndex++\n\n      if (isHTTPAccessFallbackError(error)) {\n        errorMetaTags.push(\n          <meta name=\"robots\" content=\"noindex\" key={error.digest} />,\n          process.env.NODE_ENV === 'development' ? (\n            <meta name=\"next-error\" content=\"not-found\" key=\"next-error\" />\n          ) : null\n        )\n      } else if (isRedirectError(error)) {\n        const redirectUrl = addPathPrefix(\n          getURLFromRedirectError(error),\n          basePath\n        )\n        const statusCode = getRedirectStatusCodeFromError(error)\n        const isPermanent =\n          statusCode === RedirectStatusCode.PermanentRedirect ? true : false\n        if (redirectUrl) {\n          errorMetaTags.push(\n            <meta\n              id=\"__next-page-redirect\"\n              httpEquiv=\"refresh\"\n              content={`${isPermanent ? 0 : 1};url=${redirectUrl}`}\n              key={error.digest}\n            />\n          )\n        }\n      }\n    }\n\n    const serverInsertedHTML = renderServerInsertedHTML()\n\n    // Skip React rendering if we know the content is empty.\n    if (\n      polyfillTags.length === 0 &&\n      traceMetaTags.length === 0 &&\n      errorMetaTags.length === 0 &&\n      Array.isArray(serverInsertedHTML) &&\n      serverInsertedHTML.length === 0\n    ) {\n      return ''\n    }\n\n    const stream = await renderToReadableStream(\n      <>\n        {polyfillTags}\n        {serverInsertedHTML}\n        {traceMetaTags}\n        {errorMetaTags}\n      </>,\n      {\n        // Larger chunk because this isn't sent over the network.\n        // Let's set it to 1MB.\n        progressiveChunkSize: 1024 * 1024,\n      }\n    )\n\n    // The polyfills and trace metadata have been flushed, so they don't need to be rendered again\n    polyfillTags = []\n    traceMetaTags = []\n\n    // There's no need to wait for the stream to be ready\n    // e.g. calling `await stream.allReady` because `streamToString` will\n    // wait and decode the stream progressively with better parallelism.\n    return streamToString(stream)\n  }\n}\n"],"names":["React","isHTTPAccessFallbackError","getURLFromRedirectError","getRedirectStatusCodeFromError","isRedirectError","renderToReadableStream","streamToString","RedirectStatusCode","addPathPrefix","makeGetServerInsertedHTML","polyfills","renderServerInsertedHTML","serverCapturedErrors","tracingMetadata","basePath","flushedErrorMetaTagsUntilIndex","polyfillTags","map","polyfill","script","src","traceMetaTags","key","value","index","meta","name","content","getServerInsertedHTML","errorMetaTags","length","error","push","digest","process","env","NODE_ENV","redirectUrl","statusCode","isPermanent","PermanentRedirect","id","httpEquiv","serverInsertedHTML","Array","isArray","stream","progressiveChunkSize"],"mappings":"AAAA,0FAA0F;AAC1F,OAAOA,WAAyB,QAAO;AACvC,SAASC,yBAAyB,QAAQ,oEAAmE;AAC7G,SACEC,uBAAuB,EACvBC,8BAA8B,QACzB,mCAAkC;AACzC,SAASC,eAAe,QAAQ,yCAAwC;AACxE,SAASC,sBAAsB,QAAQ,mBAAkB;AACzD,SAASC,cAAc,QAAQ,0CAAyC;AACxE,SAASC,kBAAkB,QAAQ,+CAA8C;AACjF,SAASC,aAAa,QAAQ,gDAA+C;AAG7E,OAAO,SAASC,0BAA0B,EACxCC,SAAS,EACTC,wBAAwB,EACxBC,oBAAoB,EACpBC,eAAe,EACfC,QAAQ,EAOT;IACC,IAAIC,iCAAiC;IAErC,oFAAoF;IACpF,IAAIC,eAAeN,UAAUO,GAAG,CAAC,CAACC;QAChC,qBAAO,KAACC;YAA2B,GAAGD,QAAQ;WAA1BA,SAASE,GAAG;IAClC;IACA,IAAIC,gBAAgB,AAACR,CAAAA,mBAAmB,EAAE,AAAD,EAAGI,GAAG,CAAC,CAAC,EAAEK,GAAG,EAAEC,KAAK,EAAE,EAAEC,sBAC/D,KAACC;YAAsCC,MAAMJ;YAAKK,SAASJ;WAAhD,CAAC,gBAAgB,EAAEC,OAAO;IAGvC,OAAO,eAAeI;QACpB,kEAAkE;QAClE,WAAW;QACX,MAAMC,gBAAgB,EAAE;QACxB,MAAOd,iCAAiCH,qBAAqBkB,MAAM,CAAE;YACnE,MAAMC,QAAQnB,oBAAoB,CAACG,+BAA+B;YAClEA;YAEA,IAAId,0BAA0B8B,QAAQ;gBACpCF,cAAcG,IAAI,eAChB,KAACP;oBAAKC,MAAK;oBAASC,SAAQ;mBAAeI,MAAME,MAAM,GACvDC,QAAQC,GAAG,CAACC,QAAQ,KAAK,8BACvB,KAACX;oBAAKC,MAAK;oBAAaC,SAAQ;mBAAgB,gBAC9C;YAER,OAAO,IAAIvB,gBAAgB2B,QAAQ;gBACjC,MAAMM,cAAc7B,cAClBN,wBAAwB6B,QACxBjB;gBAEF,MAAMwB,aAAanC,+BAA+B4B;gBAClD,MAAMQ,cACJD,eAAe/B,mBAAmBiC,iBAAiB,GAAG,OAAO;gBAC/D,IAAIH,aAAa;oBACfR,cAAcG,IAAI,eAChB,KAACP;wBACCgB,IAAG;wBACHC,WAAU;wBACVf,SAAS,GAAGY,cAAc,IAAI,EAAE,KAAK,EAAEF,aAAa;uBAC/CN,MAAME,MAAM;gBAGvB;YACF;QACF;QAEA,MAAMU,qBAAqBhC;QAE3B,wDAAwD;QACxD,IACEK,aAAac,MAAM,KAAK,KACxBT,cAAcS,MAAM,KAAK,KACzBD,cAAcC,MAAM,KAAK,KACzBc,MAAMC,OAAO,CAACF,uBACdA,mBAAmBb,MAAM,KAAK,GAC9B;YACA,OAAO;QACT;QAEA,MAAMgB,SAAS,MAAMzC,qCACnB;;gBACGW;gBACA2B;gBACAtB;gBACAQ;;YAEH;YACE,yDAAyD;YACzD,uBAAuB;YACvBkB,sBAAsB,OAAO;QAC/B;QAGF,8FAA8F;QAC9F/B,eAAe,EAAE;QACjBK,gBAAgB,EAAE;QAElB,qDAAqD;QACrD,qEAAqE;QACrE,oEAAoE;QACpE,OAAOf,eAAewC;IACxB;AACF","ignoreList":[0]}