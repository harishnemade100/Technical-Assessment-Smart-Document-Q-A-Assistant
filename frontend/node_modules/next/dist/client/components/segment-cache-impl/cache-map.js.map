{"version":3,"sources":["../../../../src/client/components/segment-cache-impl/cache-map.ts"],"sourcesContent":["import { lruPut, updateLruSize, deleteFromLru } from './lru'\n\n/**\n * A specialized data type for storing multi-key cache entries.\n *\n * The basic structure is a map whose keys are tuples, called the keypath.\n * When querying the cache, keypaths are compared per-element.\n *\n * Example:\n *   set(map, ['https://localhost', 'foo/bar/baz'], 'yay');\n *   get(map, ['https://localhost', 'foo/bar/baz']) -> 'yay'\n *\n * The parts of the keypath represent the different inputs that contribute\n * to the entry value. To illustrate, if you were to use this data type to store\n * HTTP responses, the keypath would include the URL and everything listed by\n * the Vary header.\n *\n * The order of elements in a keypath must be consistent between lookups to\n * be considered the same, but besides that, the order of the keys is not\n * semantically meaningful.\n *\n * Keypaths may include a special kind of key called Fallback. When an entry is\n * stored with Fallback as part of its keypath, it means that the entry does not\n * vary by that key. When querying the cache, if an exact match is not found for\n * a keypath, the cache will check for a Fallback match instead. Each element of\n * the keypath may have a Fallback, so retrieval is an O(n ^ 2) operation, but\n * it's expected that keypaths are relatively short.\n *\n * Example:\n *   set(cacheMap, ['store', 'product', 1], PRODUCT_PAGE_1);\n *   set(cacheMap, ['store', 'product', Fallback], GENERIC_PRODUCT_PAGE);\n *\n *   // Exact match\n *   get(cacheMap, ['store', 'product', 1]) -> PRODUCT_PAGE_1\n *\n *   // Fallback match\n *   get(cacheMap, ['store', 'product', 2]) -> GENERIC_PRODUCT_PAGE\n *\n * Because we have the Fallback mechanism, we can impose a constraint that\n * regular JS maps do not have: a value cannot be stored at multiple keypaths\n * simultaneously. These cases should be expressed with Fallback keys instead.\n *\n * Additionally, because values only exist at a single keypath at a time, we can\n * optimize successive lookups by caching the internal map entry on the value\n * itself, using the `ref` field. This is especially useful because it lets us\n * skip the O(n ^ 2) lookup that occurs when Fallback entries are present.\n *\n\n * How to decide if stuff belongs in here, or in cache.ts?\n * -------------------------------------------------------\n * \n * Anything to do with retrival, lifetimes, or eviction needs to go in this\n * module because it affects the fallback algorithm. For example, when\n * performing a lookup, if an entry is stale, it needs to be treated as\n * semantically equivalent to if the entry was not present at all.\n * \n * If there's logic that's not related to the fallback algorithm, though, we\n * should prefer to put it in cache.ts.\n */\n\ntype MapEntryShared<K extends readonly unknown[], V extends MapValue> = {\n  parent: MapEntry<K, V> | null\n  key: any\n  map: Map<any, MapEntry<K, V>> | null\n\n  // LRU-related fields\n  prev: MapEntry<any, any> | null\n  next: MapEntry<any, any> | null\n  size: number\n}\n\ntype EmptyMapEntry<\n  K extends readonly unknown[],\n  V extends MapValue,\n> = MapEntryShared<K, V> & {\n  value: null\n}\n\ntype FullMapEntry<\n  K extends readonly unknown[],\n  V extends MapValue,\n> = MapEntryShared<K, V> & {\n  value: V\n}\n\nexport type MapEntry<K extends readonly unknown[], V extends MapValue> =\n  | EmptyMapEntry<K, V>\n  | FullMapEntry<K, V>\n\n// The CacheMap type is just the root entry of the map.\nexport type CacheMap<\n  K extends readonly unknown[],\n  V extends MapValue,\n> = MapEntry<K, V>\n\n// The protocol that values must implement. In practice, the only two types that\n// we ever actually deal with in this module are RouteCacheEntry and\n// SegmentCacheEntry; this is just to keep track of the coupling so we don't\n// leak concerns between the modules unnecessarily.\nexport interface MapValue {\n  ref: MapEntry<any, any> | null\n  size: number\n  staleAt: number\n  version: number\n}\n\ntype KeyWithFallback<K extends readonly unknown[]> = {\n  [I in keyof K]: K[I] | FallbackType\n}\n\nexport type FallbackType = { __brand: 'Fallback' }\nexport const Fallback = {} as FallbackType\n\n// This is a special internal key that is used for \"revalidation\" entries. It's\n// an implementation detail that shouldn't leak outside of this module.\nconst Revalidation = {}\n\nexport function createCacheMap<\n  Keypath extends Array<any>,\n  V extends MapValue,\n>(): CacheMap<Keypath, V> {\n  let cacheMap: MapEntry<Keypath, V> = {\n    parent: null,\n    key: null,\n    value: null,\n    map: null,\n\n    // LRU-related fields\n    prev: null,\n    next: null,\n    size: 0,\n  }\n  return cacheMap\n}\n\nfunction getOrInitialize<K extends readonly unknown[], V extends MapValue>(\n  cacheMap: CacheMap<K, V>,\n  keys: K,\n  isRevalidation: boolean\n): MapEntry<K, V> {\n  // Go through each level of keys until we find the entry that matches, or\n  // create a new entry if one doesn't exist.\n  //\n  // This function will only return entries that match the keypath _exactly_.\n  // Unlike getWithFallback, it will not access fallback entries unless it's\n  // explicitly part of the keypath.\n  let entry = cacheMap\n  let i = 0\n  while (true) {\n    let key\n    if (i < keys.length) {\n      key = keys[i]\n    } else if (isRevalidation && i === keys.length) {\n      // During a revalidation, we append an internal \"Revalidation\" key to\n      // the end of the keypath. The \"normal\" entry is its parent.\n\n      // However, if the parent entry is currently empty, we don't need to store\n      // this as a revalidation entry. Just insert the revalidation into the\n      // normal slot.\n      if (entry.value === null) {\n        return entry\n      }\n\n      // Otheriwse, create a child entry.\n      key = Revalidation\n    } else {\n      // There are no more keys. This is the terminal entry.\n      break\n    }\n    i++\n\n    let map = entry.map\n    if (map !== null) {\n      const existingEntry = map.get(key)\n      if (existingEntry !== undefined) {\n        // Found a match. Keep going.\n        entry = existingEntry\n        continue\n      }\n    } else {\n      map = new Map()\n      entry.map = map\n    }\n    // No entry exists yet at this level. Create a new one.\n    const newEntry: EmptyMapEntry<K, V> = {\n      parent: entry,\n      key,\n      value: null,\n      map: null,\n\n      // LRU-related fields\n      prev: null,\n      next: null,\n      size: 0,\n    }\n    map.set(key, newEntry)\n    entry = newEntry\n  }\n\n  return entry\n}\n\nexport function getFromCacheMap<\n  K extends readonly unknown[],\n  V extends MapValue,\n>(\n  now: number,\n  currentCacheVersion: number,\n  rootEntry: CacheMap<K, V>,\n  keys: KeyWithFallback<K>,\n  isRevalidation: boolean\n): V | null {\n  const entry = getEntryWithFallbackImpl(\n    now,\n    currentCacheVersion,\n    rootEntry,\n    keys,\n    isRevalidation,\n    0\n  )\n  if (entry === null || entry.value === null) {\n    return null\n  }\n  // This is an LRU access. Move the entry to the front of the list.\n  lruPut(entry)\n  return entry.value\n}\n\nexport function isValueExpired<V extends MapValue>(\n  now: number,\n  currentCacheVersion: number,\n  value: V\n): boolean {\n  return value.staleAt <= now || value.version < currentCacheVersion\n}\n\nfunction lazilyEvictIfNeeded<K extends readonly unknown[], V extends MapValue>(\n  now: number,\n  currentCacheVersion: number,\n  entry: MapEntry<K, V>\n) {\n  // We have a matching entry, but before we can return it, we need to check if\n  // it's still fresh. Otherwise it should be treated the same as a cache miss.\n\n  if (entry.value === null) {\n    // This entry has no value, so there's nothing to evict.\n    return entry\n  }\n\n  const value = entry.value\n  if (isValueExpired(now, currentCacheVersion, value)) {\n    // The value expired. Lazily evict it from the cache, and return null. This\n    // is conceptually the same as a cache miss.\n    deleteMapEntry(entry)\n    return null\n  }\n\n  // The matched entry has not expired. Return it.\n  return entry\n}\n\nfunction getEntryWithFallbackImpl<\n  K extends readonly unknown[],\n  V extends MapValue,\n>(\n  now: number,\n  currentCacheVersion: number,\n  entry: MapEntry<K, V>,\n  keys: K,\n  isRevalidation: boolean,\n  index: number\n): MapEntry<K, V> | null {\n  // This is similar to getExactEntry, but if an exact match is not found for\n  // a key, it will return the fallback entry instead. This is recursive at\n  // every level, e.g. an entry with keypath [a, Fallback, c, Fallback] is\n  // valid match for [a, b, c, d].\n  //\n  // It will return the most specific match available.\n  let key\n  if (index < keys.length) {\n    key = keys[index]\n  } else if (isRevalidation && index === keys.length) {\n    // During a revalidation, we append an internal \"Revalidation\" key to\n    // the end of the keypath.\n    key = Revalidation\n  } else {\n    // There are no more keys. This is the terminal entry.\n\n    // TODO: When performing a lookup during a navigation, as opposed to a\n    // prefetch, we may want to skip entries that are Pending if there's also\n    // a Fulfilled fallback entry. Tricky to say, though, since if it's\n    // already pending, it's likely to stream in soon. Maybe we could do this\n    // just on slow connections and offline mode.\n\n    return lazilyEvictIfNeeded(now, currentCacheVersion, entry)\n  }\n  const map = entry.map\n  if (map !== null) {\n    const existingEntry = map.get(key)\n    if (existingEntry !== undefined) {\n      // Found an exact match for this key. Keep searching.\n      const result = getEntryWithFallbackImpl<K, V>(\n        now,\n        currentCacheVersion,\n        existingEntry,\n        keys,\n        isRevalidation,\n        index + 1\n      )\n      if (result !== null) {\n        return result\n      }\n    }\n    // No match found for this key. Check if there's a fallback.\n    const fallbackEntry = map.get(Fallback)\n    if (fallbackEntry !== undefined) {\n      // Found a fallback for this key. Keep searching.\n      return getEntryWithFallbackImpl(\n        now,\n        currentCacheVersion,\n        fallbackEntry,\n        keys,\n        isRevalidation,\n        index + 1\n      )\n    }\n  }\n  return null\n}\n\nexport function setInCacheMap<K extends readonly unknown[], V extends MapValue>(\n  cacheMap: CacheMap<K, V>,\n  keys: K,\n  value: V,\n  isRevalidation: boolean\n): void {\n  // Add a value to the map at the given keypath. If the value is already\n  // part of the map, it's removed from its previous keypath. (NOTE: This is\n  // unlike a regular JS map, but the behavior is intentional.)\n  const entry = getOrInitialize(cacheMap, keys, isRevalidation)\n  setMapEntryValue(entry, value)\n\n  // This is an LRU access. Move the entry to the front of the list.\n  lruPut(entry)\n  updateLruSize(entry, value.size)\n}\n\nfunction setMapEntryValue<K extends readonly unknown[], V extends MapValue>(\n  entry: MapEntry<K, V>,\n  value: V\n): void {\n  if (entry.value !== null) {\n    // There's already a value at the given keypath. Disconnect the old value\n    // from the map. We're not calling `deleteMapEntry` here because the\n    // entry itself is still in the map. We just want to overwrite its value.\n    dropRef(entry.value)\n\n    // Fill the entry with the updated value.\n    const emptyEntry: EmptyMapEntry<K, V> = entry as any\n    emptyEntry.value = null\n    fillEmptyReference(emptyEntry, value)\n  } else {\n    fillEmptyReference(entry as any, value)\n  }\n}\n\nfunction fillEmptyReference<K extends readonly unknown[], V extends MapValue>(\n  entry: EmptyMapEntry<K, V>,\n  value: V\n): void {\n  // This value may already be in the map at a different keypath.\n  // Grab a reference before we overwrite it.\n  const oldEntry = value.ref\n\n  const fullEntry: FullMapEntry<K, V> = entry as any\n  fullEntry.value = value\n  value.ref = fullEntry\n\n  updateLruSize(fullEntry, value.size)\n\n  if (oldEntry !== null && oldEntry !== entry && oldEntry.value === value) {\n    // This value is already in the map at a different keypath in the map.\n    // Values only exist at a single keypath at a time. Remove it from the\n    // previous keypath.\n    //\n    // Note that only the internal map entry is garbage collected; we don't\n    // call `dropRef` here because it's still in the map, just\n    // at a new keypath (the one we just set, above).\n    deleteMapEntry(oldEntry)\n  }\n}\n\nexport function deleteFromCacheMap<V extends MapValue>(value: V): void {\n  const entry = value.ref\n  if (entry === null) {\n    // This value is not a member of any map.\n    return\n  }\n\n  dropRef(value)\n  deleteMapEntry(entry)\n}\n\nfunction dropRef<V extends MapValue>(value: V): void {\n  // Drop the value from the map by setting its `ref` backpointer to\n  // null. This is a separate operation from `deleteMapEntry` because when\n  // re-keying a value we need to be able to delete the old, internal map\n  // entry without garbage collecting the value itself.\n  value.ref = null\n}\n\nfunction deleteMapEntry<K extends readonly unknown[], V extends MapValue>(\n  entry: MapEntry<K, V>\n): void {\n  // Delete the entry from the cache.\n  const emptyEntry: EmptyMapEntry<K, V> = entry as any\n  emptyEntry.value = null\n\n  deleteFromLru(entry)\n\n  // Check if we can garbage collect the entry.\n  const map = emptyEntry.map\n  if (map === null) {\n    // Since this entry has no value, and also no child entries, we can\n    // garbage collect it. Remove it from its parent, and keep garbage\n    // collecting the parents until we reach a non-empty entry.\n    let parent = emptyEntry.parent\n    let key = emptyEntry.key\n    while (parent !== null) {\n      const parentMap = parent.map\n      if (parentMap !== null) {\n        parentMap.delete(key)\n        if (parentMap.size === 0) {\n          // We just removed the last entry in the parent map.\n          parent.map = null\n          if (parent.value === null) {\n            // The parent node has no child entries, nor does it have a value\n            // on itself. It can be garbage collected. Keep going.\n            key = parent.key\n            parent = parent.parent\n            continue\n          }\n        }\n      }\n      // The parent is not empty. Stop garbage collecting.\n      break\n    }\n  } else {\n    // Check if there's a revalidating entry. If so, promote it to a\n    // \"normal\" entry, since the normal one was just deleted.\n    const revalidatingEntry = map.get(Revalidation)\n    if (revalidatingEntry !== undefined && revalidatingEntry.value !== null) {\n      setMapEntryValue(emptyEntry, revalidatingEntry.value)\n    }\n  }\n}\n\nexport function setSizeInCacheMap<V extends MapValue>(\n  value: V,\n  size: number\n): void {\n  const entry = value.ref\n  if (entry === null) {\n    // This value is not a member of any map.\n    return\n  }\n  // Except during initialization (when the size is set to 0), this is the only\n  // place the `size` field should be updated, to ensure it's in sync with the\n  // the LRU.\n  value.size = size\n  updateLruSize(entry, size)\n}\n"],"names":["Fallback","createCacheMap","deleteFromCacheMap","getFromCacheMap","isValueExpired","setInCacheMap","setSizeInCacheMap","Revalidation","cacheMap","parent","key","value","map","prev","next","size","getOrInitialize","keys","isRevalidation","entry","i","length","existingEntry","get","undefined","Map","newEntry","set","now","currentCacheVersion","rootEntry","getEntryWithFallbackImpl","lruPut","staleAt","version","lazilyEvictIfNeeded","deleteMapEntry","index","result","fallbackEntry","setMapEntryValue","updateLruSize","dropRef","emptyEntry","fillEmptyReference","oldEntry","ref","fullEntry","deleteFromLru","parentMap","delete","revalidatingEntry"],"mappings":"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","ignoreList":[0]}